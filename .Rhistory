# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
data_hab_type <- read.csv("data_hab_type_TD.csv",
header = TRUE,
stringsAsFactors = TRUE)
dim(data_hab_type)
# résumé univarié des données
head(data_hab_type)
summary(data_hab_type)
# résumé univarié des données
head(data_hab_type)
summary(data_hab_type)
# pour faciliter l'interprétation, modification des noms des modalités
levels(data_hab_type$VoitureDansGarage) <- paste0("garage_", levels(data_hab_type$VoitureDansGarage))
levels(data_hab_type$NettASecVetements) <- paste0("NetSecVet_", levels(data_hab_type$NettASecVetements))
# on réordonne les modalités afin pour avoir un ordre croissant
levels(data_hab_type$SortirOrduresExterieur) <- paste0("OrdureSortie_",c("3","2","1"))
# Identifier les modalités rares afin de ne pas polluer les futures analyses.
# => modalités 2 et 3 de la variable garage fusionnées.
# Identifier les modalités rares afin de ne pas polluer les futures analyses.
# => modalités 2 et 3 de la variable garage fusionnées.
table(data_hab_type$VoitureDansGarage)
# Identification des variables selon leur type
quali <- which(sapply(data_hab_type, is.factor))
quanti <- which(sapply(data_hab_type, is.numeric))
quanti.discr <- which(sapply(data_hab_type,
FUN = function(xx){
(is.numeric(xx))&(length(table(xx)))<10
})
)
quanti.cont <- quanti[-quanti.discr]
quanti.polluant <- which(regexpr("outcome", colnames(data_hab_type))>0)
# Analyses univariées
### Boxplots
mapply(data_hab_type[,quanti.cont],
FUN = function(xx,name){Boxplot(xx, main = name,id.n = 2, ylab = "")},
name = names(quanti.cont))
# Analyses univariées
### Boxplots
install.packages("car")  # if not already installed
library(car)
mapply(data_hab_type[,quanti.cont],
FUN = function(xx,name){Boxplot(xx, main = name,id.n = 2, ylab = "")},
name = names(quanti.cont))
### Diagrammes en barres
par(mfrow = c(2, 3))
mapply(data_hab_type[,quanti.discr],
FUN = function(xx,name){barplot(table(xx),main = name)},
name = names(quanti.discr))
### Diagrammes en barres
par(mfrow = c(2, 3), mar = c(3, 3, 2, 1))  # Marges plus serrées
par(mfrow = c(2, 3))
mapply(data_hab_type[,quanti.discr],
FUN = function(xx,name){barplot(table(xx),main = name)},
name = names(quanti.discr))
mapply(data_hab_type[,quali],
FUN = function(xx,name){barplot(table(xx),main = name)},
name = names(quali))
### Tableaux
#### quanti continu
stargazer(data_hab_type[,quanti.cont],
summary.stat = c("n","min","p25","median","mean","p75","max","sd"),
type = "text")
### Tableaux
#### quanti continu
install.packages("stargazer")
library(stargazer)
stargazer(data_hab_type[,quanti.cont],
summary.stat = c("n","min","p25","median","mean","p75","max","sd"),
type = "text")
# quanti discret
univ_quanti.discr <- lapply(data_hab_type[,quanti.discr], freq)
univ_quanti.discr
# quanti discret
install.packages("questionr")
library(questionr)
univ_quanti.discr <- lapply(data_hab_type[,quanti.discr], freq)
univ_quanti.discr
# quali
univ_quali <- lapply(data_hab_type[,quali], freq)
univ_quali
# Analyses univariées
### lien entre variables quanti
# Pearson
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
# Analyses univariées
### lien entre variables quanti
# Pearson
install.packages("corrplot")
library(corrplot)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
# Analyses univariées
### lien entre variables quanti
# Pearson
library(FactoMineR)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
library(Hmisc)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
# Analyses univariées
### lien entre variables quanti
# Pearson
library(FactoMineR)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
# Analyses univariées
### lien entre variables quanti
# Pearson
library(corrplot)
matcor.pears <-cor(data_hab_type[,quanti.cont])
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.55,
addCoef.col = "black")
# Analyses univariées
### lien entre variables quanti
# Pearson
library(corrplot)
matcor.pears <-cor(data_hab_type[,quanti.cont])
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.55,
addCoef.col = "black")
library(plotly)
plot_ly(x = colnames(matcor.pears),
y = rownames(matcor.pears),
z = matcor.pears,
type = "heatmap",
colorscale = "RdBu")
plot_ly(x = colnames(matcor.pears),
y = rownames(matcor.pears),
z = matcor.pears,
type = "upper",
colorscale = "RdBu")
# Analyses univariées
### lien entre variables quanti
# Pearson
library(corrplot)
matcor.pears <-cor(data_hab_type[,quanti.cont])
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.55,
addCoef.col = "black")
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.75,
addCoef.col = "black")
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.15,
addCoef.col = "black")
corrplot(matcor.pears,
method = "color",
type = "upper",
tl.cex = 0.05,
addCoef.col = "black")
# Analyses univariées
### lien entre variables quanti
# Pearson
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
# Analyses univariées
### lien entre variables quanti
# Pearson
library(FactoMineR)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
find("PlotCorr")
# Analyses univariées
### lien entre variables quanti
# Pearson
install.packages("DescTools")
library(DescTools)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
matcor.pears <-cor(data_hab_type[,quanti.cont])
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
matcor.pears <-cor(data_hab_type[,quanti.cont])
par(mar = c(5, 5, 5, 5))  # marges plus grandes
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
par(mar = c(2, 2, 2, 2))  # marges plus grandes
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
par(mar = c(1, 1, 1, 1))  # marges plus grandes
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
matcor.pears <-cor(data_hab_type[,quanti.cont])
par(mar = c(1, 1, 1, 1))  # marges plus grandes
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
png("matrice_corr.png", width = 1000, height = 1000)
PlotCorr(matcor.pears, cex.lab = 0.8, cex = 0.55)
dev.off()
matcor.pears <-cor(data_hab_type[,quanti.cont])
png("matrice_corr.png", width = 1000, height = 1000)
PlotCorr(matcor.pears, cex.lab = par("cex.lab"), cex = 0.55)
dev.off()
# Spearman
matcor.spear <- cor(data_hab_type[,quanti.cont],method = "spearman")
png("matrice_corr_spearman.png", width = 1000, height = 1000)
PlotCorr(matcor.spear, cex.lab = par("cex.lab"), cex = 0.55)
dev.off()
# lien entre variables quali et discrètes
matcram <- PairApply(data_hab_type[,c(quali,quanti.discr)], CramerV, symmetric = TRUE)
# lien entre variables quali et discrètes
matcram <- PairApply(data_hab_type[,c(quali,quanti.discr)], CramerV, symmetric = TRUE)
png("matrice_corr_cramer.png", width = 1000, height = 1000)
PlotCorr(matcram,
cols = colorRampPalette(c("white", "steelblue"), space = "rgb")(20),
breaks = seq(0, 1, length = 21),
cex.lab = par("cex.lab"), cex = 0.55,
args.colorlegend = list(labels=sprintf("%.1f", seq(0, 1, length = 11)), frame=TRUE))
dev.off()
