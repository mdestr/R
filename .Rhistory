# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
nba<-read.table("./nbaStats.txt",
stringsAsFactors = TRUE)
# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
nba<-read.table("./nbaStats.txt",
stringsAsFactors = TRUE)
# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
nba<-read.table("./nbastats.csv",
stringsAsFactors = TRUE)
head(nba)
# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
nba<-read.table("./nbastats.csv",
stringsAsFactors = TRUE)
head(nba)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(2, 3),
graph = FALSE)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(2, 3),
graph = FALSE)
head(nba)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
nba<-read.table("./nbastats.csv",
stringsAsFactors = TRUE)
head(nba)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
nba<-read.table("./nbastatscopy.csv",
stringsAsFactors = TRUE)
head(nba)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
nba<-read.table("./nbastatscopy.csv",
stringsAsFactors = TRUE)
head(nba)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
# Définir le répertoire de travail comme celui du script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# 1. Charger les données avec les bons paramètres
nba <- read.table("./nbastatscopy.csv",
header = TRUE,    # La première ligne contient les noms de colonnes
sep = "",         # Séparateur = espace
dec = ".",        # Point comme séparateur décimal
stringsAsFactors = FALSE)
head(nba)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
# 1. Charger les données avec les bons paramètres
nba <- read.table("./nbastats.csv",
header = TRUE,    # La première ligne contient les noms de colonnes
sep = "",         # Séparateur = espace
dec = ".",        # Point comme séparateur décimal
stringsAsFactors = FALSE)
head(nba)
# install.packages("FactoMineR")
library(FactoMineR)
# on effectue l'ACP (réduite et avec 5 dimensions par défaut)
res.pca <- PCA(nba,
quanti.sup = c(4, 29),
quali.sup = c(1, 2, 3),
graph = FALSE)
# export des résultats dans un fichier
write.infile(res.pca, file = "./resultats_ACP.csv")
#valeurs propres
res.pca$eig
barplot(res.pca$eig[,1], las = 2)
# On analyse d’abord le plan principal (appelé aussi plan 1-2).
#graphes des individus
plot.PCA(res.pca, choix = "ind")
#graphes des variables
plot.PCA(res.pca, choix = "var")
# 1. Charger les données avec les bons paramètres
nba <- read.table("./nbastats.csv",
header = TRUE,    # La première ligne contient les noms de colonnes
sep = "",         # Séparateur = espace
dec = ".",        # Point comme séparateur décimal
stringsAsFactors = FALSE)
head(nba)
summary(nba)
# 1. Charger les données avec les bons paramètres
nba <- read.table("./nbastats.csv",
header = TRUE,    # La première ligne contient les noms de colonnes
sep = "",         # Séparateur = espace
dec = ".",        # Point comme séparateur décimal
stringsAsFactors = FALSE)
head(nba)
summary(nba)
# Install ggpubr pour les boxplots
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
# Install ggpubr pour les boxplots
install.packages("ggpubr")
library(ggpubr)
head(nba)
ggboxplot(nba, y = "AGE", width = 0.5)
ggboxplot(nba, y = "GP.Games_played", width = 0.5)
ggboxplot(nba, y = "MpG.Minutes_per_game", width = 0.5)
ggboxplot(nba, y = "VI.player_versatility", width = 0.5)
ggboxplot(nba, y = "TS..Shooting_efficiency", width = 0.5)
ggboxplot(nba, y = "PpG.Points", width = 0.5)
ggqqplot(nba, x = "PpG.Points")
install.packages("dplyr")
group_by(nba, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
)
group_by(nba, "POS") %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
)
# Descriptive statistics by groups:
library(dplyr)
group_by(nba, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
)
# Descriptive statistics by positions
# C = Center, F = Forward, G = Guard
library(dplyr)
group_by(nba, TEAM) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
)
group_by(nba, TEAM, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
)
group_by(nba, TEAM, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE),
print(n = 200)
)
print(n=200)
group_by(nba, TEAM, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
) %>%
print(n = 200)
group_by(nba, POS) %>%
summarise(
count = n(),
mean = mean(PpG.Points, na.rm = TRUE),
sd = sd(PpG.Points, na.rm = TRUE)
) %>%
print(n = 200)
# Box plot colored by groups: Species
ggboxplot(nba, x = "POS", y = "PpG.Points",
color = "POS",
palette = c("#00AFBB", "#E7B800", "#FC4E07"))
# Graphics for grouped data:
library("ggpubr")
# Box plot colored by groups: Species
ggboxplot(nba, x = "POS", y = "PpG.Points",
color = "POS",
palette = c("#00AFBB", "#E7B800", "#FC4E07"))
colors()
# Box plot colored by groups: Species
ggboxplot(nba, x = "POS", y = "PpG.Points",
color = "POS",
palette = c("#00AFBB", "#E7B800", "#FC4E07", 'lightsalmon', 'mediumpurple4', 'darkorange', 'deeppink1'))
devtools::install_github("abresler/nbastatR")
library("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools")
